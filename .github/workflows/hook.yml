name: Hook
on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      arguments:
        description: 'Client JSON Payload'
        type: string
        default: '{}'
        required: true

jobs:
  job1:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run some tests
        run: |
          echo "Running job1"
          exit 1  # Simulate failure

      - name: Set job status
        if: failure()  # This will be true if the job fails
        run: echo "sdfsd"
      
      - name: Set success status
        if: success()  # This will be true if the job succeeds
        run: echo "asdfdsf"

  job2:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run some tests
        run: |
          echo "Running job2"
      - name: Run some tests
        run: |
          echo "Running job2"
          exit 1  # Simulate failure

  final_job:
    runs-on: ubuntu-latest
    if: always()
    needs: [job1, job2] # Add all jobs that this final job depends on
    steps:
      - name: Determine failed jobs
        run: |
          # Define an array of job names
          job_names=("job1" "job2")

          failed_jobs=()

          # Loop through the job names and check the result of each job
          for job in "${job_names[@]}"; do
            # Access the result of each job via the 'needs' context
            echo "format( "needs.{0}.result", job)"

            # Check if the job failed
            if [ "$result" == "failure" ]; then
              failed_jobs+=("$job")
            fi
          done

          # Print the results
          if [ ${#failed_jobs[@]} -eq 0 ]; then
            echo "All jobs passed!"
          else
            echo "The following jobs failed: ${failed_jobs[@]}"
          fi

